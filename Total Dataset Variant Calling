#!/bin/bash
#SBATCH --account=def-mcfarlas
#SBATCH --time=12:00:00
#SBATCH --cpus-per-task=32
#SBATCH --mem=128G
#SBATCH --job-name=variant_estimate
#SBATCH --output=%x-%j.out
#SBATCH --error=%x-%j.err

# Load necessary modules
module load StdEnv/2020
module load gcc/9.3.0
module load bcftools

# Set directories and files
BAM_DIR="./aligned"
REF_GENOME="./reference_genome.fa"
OUTPUT_VCF="potential_variants.vcf.gz"

# Print job info
echo "Job started at: $(date)"
echo "Running on node: $(hostname)"
echo "BCFtools version: $(bcftools --version | head -n1)"

# Get BAM files
BAM_FILES=$(ls ${BAM_DIR}/*.bam | tr '\n' ' ')

# Print the list of BAM files being processed
echo "BAM files being processed:"
echo "$BAM_FILES"

# Run lenient variant calling
echo "Starting variant calling at: $(date)"
bcftools mpileup -Ou -f ${REF_GENOME} ${BAM_FILES} | \
    bcftools call -mv -Oz -o ${OUTPUT_VCF}

# Check if the output file was created and has content
if [ -s "${OUTPUT_VCF}" ]; then
    echo "Variant calling completed successfully. Output file: ${OUTPUT_VCF}"
else
    echo "Error: Variant calling failed or produced an empty file." >&2
    exit 1
fi

# Index the output VCF
echo "Indexing output VCF at: $(date)"
bcftools index ${OUTPUT_VCF}

# Count total number of variant sites
echo "Total number of variant sites:"
bcftools view -H ${OUTPUT_VCF} | wc -l

# Get breakdown of variant types
echo "Variant type breakdown:"
bcftools stats ${OUTPUT_VCF} | grep "^SN"

# Check distribution of quality scores
echo "Generating quality score distribution"
bcftools query -f '%QUAL\n' ${OUTPUT_VCF} | awk '{if($1>10) print $1}' | sort -n | uniq -c | awk '{print $2, $1}' > quality_distribution.txt

# Check distribution of depth
echo "Generating depth distribution"
bcftools query -f '%DP\n' ${OUTPUT_VCF} | awk '{if($1>0) print $1}' | sort -n | uniq -c | awk '{print $2, $1}' > depth_distribution.txt

# Apply basic filters and get stats
echo "Filtered variant stats (QUAL>20 && DP>5):"
bcftools view -i 'QUAL>20 && DP>5' ${OUTPUT_VCF} | bcftools stats | grep "^SN"

echo "Job completed at: $(date)"

# Print resource usage
echo "Resource usage summary:"
sacct -j $SLURM_JOB_ID --format=JobID,JobName,MaxRSS,Elapsed
